#graph from DTF
graph = {0: {'n': 4, 's': 8, 'w': 3, 'e': 1}, 1: {'n': 7, 's': 2, 'w': 0, 'e': 22}, 7: {'n': 9, 's': 1, 'e': 12}, 12: {'n': 20, 'w': 7, 'e': 18}, 20: {'n': 31, 's': 12, 'e': 26}, 22: {'w': 1}, 3: {'n': 21, 'w': 11, 'e': 0}, 4: {'s': 0}, 8: {'n': 0, 'w': 16}, 16: {'e': 8}, 21: {'s': 3, 'w': 36}, 11: {'s': 80, 'e': 3}, 80: {'n': 11, 'w': 83}, 83: {'s': 99, 'e': 80}, 99: {'n': 83, 's': 122}, 122: {'n': 99}, 36: {'w': 41, 'e': 21}, 41: {'s': 76, 'w': 69, 'e': 36}, 76: {'n': 41}, 69: {'s': 72, 'e': 41}, 72: {'n': 69, 's': 89}, 89: {'n': 72, 's': 104}, 104: {'n': 89, 's': 126, 'w': 105}, 105: {'n': 129, 'w': 225, 'e': 104}, 225: {'w': 226, 'e': 105}, 226: {'s': 260, 'e': 225}, 260: {'n': 226, 'w': 266}, 266: {'n': 379, 'e': 260}, 129: {'s': 105, 'w': 190}, 126: {'n': 104, 's': 135, 'w': 158}, 135: {'n': 126, 's': 149}, 158: {'s': 164, 'w': 235, 'e': 126}, 235: {'e': 158}, 164: {'n': 158, 'w': 180}, 180: {'e': 164}, 149: {'n': 135, 's': 191, 'w': 156}, 156: {'s': 209, 'w': 177, 'e': 149}, 209: {'n': 156, 'w': 213}, 213: {'s': 217, 'w': 216, 'e': 209}, 217: {'n': 213, 'w': 271}, 271: {'s': 310, 'e': 217}, 310: {'n': 271}, 177: {'w': 215, 'e': 156}, 191: {'n': 149, 's': 193}, 193: {'n': 191, 's': 203, 'w': 241}, 203: {'n': 193, 's': 269}, 269: {'n': 203, 's': 315}, 315: {'n': 269, 's': 406, 'e': 335}, 241: {'s': 256, 'e': 193}, 256: {'n': 241, 's': 279, 'w': 327}, 327: {'s': 362, 'e': 256}, 362: {'n': 327, 's': 395, 'w': 469}, 395: {'n': 362, 'w': 423}, 423: {'e': 395}, 279: {'n': 256, 's': 323}, 323: {'n': 279}, 469: {'e': 362}, 406: {'n': 315, 'w': 410}, 410: {'e': 406}, 335: {'s': 346, 'w': 315, 'e': 378}, 378: {'s': 466, 'w': 335}, 346: {'n': 335}, 466: {'n': 378, 's': 472}, 472: {'n': 466, 's': 481, 'e': 495}, 495: {'w': 472}, 481: {'n': 472, 'w': 485}, 485: {'e': 481}, 215: {'n': 243, 'w': 220, 'e': 177}, 220: {'n': 230, 'w': 314, 'e': 215}, 243: {'s': 215}, 230: {'s': 220, 'w': 344}, 314: {'w': 339, 'e': 220}, 339: {'s': 404, 'e': 314}, 404: {'n': 339, 'w': 482}, 482: {'s': 484, 'e': 404}, 484: {'n': 482}, 344: {'n': 359, 'w': 367, 'e': 230}, 359: {'n': 458, 's': 344}, 458: {'s': 359, 'w': 463}, 463: {'n': 418, 'e': 458}, 367: {'n': 462, 'e': 344}, 462: {'s': 367, 'w': 486}, 486: {'e': 462}, 418: {'s': 463, 'w': 479, 'e': 349}, 479: {'e': 418}, 349: {'n': 284, 'w': 418}, 284: {'n': 470, 's': 349, 'w': 368, 'e': 254}, 470: {'s': 284}, 254: {'w': 284, 'e': 205}, 205: {'w': 254, 'e': 162}, 162: {'n': 128, 'w': 205}, 368: {'n': 436, 'w': 465, 'e': 284}, 465: {'e': 368}, 436: {'s': 368}, 128: {'s': 162, 'w': 194, 'e': 92}, 194: {'w': 227, 'e': 128}, 227: {'e': 194}, 92: {'n': 81, 's': 100, 'w': 128}, 81: {'n': 137, 's': 92, 'w': 108, 'e': 45}, 100: {'n': 92}, 137: {'s': 81, 'w': 168}, 108: {'w': 167, 'e': 81}, 45: {'n': 85, 'w': 81, 'e': 40}, 85: {'s': 45}, 40: {'n': 74, 'w': 45, 'e': 19}, 74: {'s': 40}, 19: {'n': 32, 'w': 40, 'e': 15}, 15: {'w': 19, 'e': 13}, 13: {'n': 14, 'w': 15, 'e': 9}, 9: {'s': 7, 'w': 13}, 14: {'n': 17, 's': 13, 'w': 47}, 17: {'n': 33, 's': 14, 'w': 46, 'e': 28}, 47: {'e': 14}, 32: {'s': 19}, 28: {'n': 60, 's': 30, 'w': 17}, 33: {'s': 17}, 46: {'n': 61, 'w': 79, 'e': 17}, 79: {'w': 106, 'e': 46}, 106: {'n': 161, 'w': 112, 'e': 79}, 112: {'n': 210, 'w': 124, 'e': 106}, 210: {'s': 112}, 124: {'n': 174, 'e': 112}, 174: {'n': 277, 's': 124, 'w': 221}, 221: {'n': 250, 'w': 342, 'e': 174}, 250: {'n': 295, 's': 221, 'w': 289}, 295: {'n': 332, 's': 250}, 332: {'n': 351, 's': 295}, 351: {'n': 417, 's': 332, 'w': 453}, 277: {'n': 331, 's': 174}, 161: {'n': 166, 's': 106}, 61: {'n': 82, 's': 46, 'w': 63}, 82: {'n': 155, 's': 61}, 63: {'n': 140, 'e': 61}, 140: {'s': 63}, 155: {'s': 82, 'w': 185}, 185: {'n': 195, 'w': 292, 'e': 155}, 292: {'n': 316, 'e': 185}, 195: {'s': 185}, 316: {'s': 292, 'w': 341}, 341: {'e': 316}, 166: {'s': 161, 'w': 208}, 208: {'n': 307, 'e': 166}, 307: {'s': 208}, 331: {'n': 387, 's': 277}, 387: {'n': 444, 's': 331}, 444: {'s': 387}, 342: {'w': 357, 'e': 221}, 357: {'e': 342}, 289: {'n': 319, 'w': 324, 'e': 250}, 324: {'n': 391, 'w': 411, 'e': 289}, 391: {'n': 489, 's': 324, 'w': 396}, 396: {'e': 391}, 489: {'n': 491, 's': 391}, 491: {'s': 489}, 319: {'n': 441, 's': 289}, 441: {'s': 319}, 411: {'w': 428, 'e': 324}, 428: {'s': 429, 'w': 452, 'e': 411}, 452: {'e': 428}, 429: {'n': 428, 'w': 451}, 451: {'e': 429}, 453: {'e': 351}, 417: {'n': 442, 's': 351}, 442: {'s': 417}, 60: {'n': 64, 's': 28}, 64: {'n': 111, 's': 60, 'w': 102}, 30: {'n': 28}, 102: {'n': 107, 'e': 64}, 107: {'n': 141, 's': 102}, 111: {'n': 121, 's': 64, 'e': 114}, 121: {'n': 148, 's': 111, 'e': 123}, 123: {'w': 121, 'e': 138}, 114: {'w': 111, 'e': 120}, 120: {'w': 114}, 148: {'n': 163, 's': 121, 'e': 178}, 163: {'n': 257, 's': 148, 'w': 165, 'e': 228}, 178: {'w': 148}, 228: {'n': 253, 'w': 163}, 253: {'n': 285, 's': 228}, 285: {'s': 253}, 165: {'n': 169, 'w': 197, 'e': 163}, 169: {'n': 385, 's': 165, 'w': 223}, 223: {'n': 483, 'e': 169}, 483: {'s': 223}, 385: {'s': 169}, 197: {'w': 199, 'e': 165}, 257: {'n': 388, 's': 163}, 388: {'n': 386, 's': 257}, 386: {'s': 388, 'e': 354}, 354: {'n': 361, 'w': 386, 'e': 321}, 321: {'n': 334, 's': 304, 'w': 354}, 304: {'n': 321, 's': 240}, 240: {'n': 304, 's': 233}, 361: {'s': 354, 'w': 366}, 366: {'w': 497, 'e': 361}, 497: {'e': 366}, 334: {'s': 321, 'e': 384}, 384: {'w': 334, 'e': 435}, 435: {'w': 384}, 233: {'n': 240, 'e': 152}, 152: {'n': 196, 's': 147, 'w': 233}, 196: {'n': 278, 's': 152, 'e': 224}, 278: {'n': 338, 's': 196}, 338: {'s': 278}, 224: {'n': 287, 'w': 196}, 147: {'n': 152, 's': 139, 'e': 154}, 154: {'n': 192, 'w': 147, 'e': 184}, 192: {'s': 154, 'e': 239}, 239: {'n': 255, 'w': 192, 'e': 336}, 336: {'n': 373, 'w': 239, 'e': 421}, 139: {'n': 147, 'w': 138, 'e': 176}, 176: {'w': 139}, 138: {'n': 143, 'w': 123, 'e': 139}, 143: {'s': 138}, 184: {'w': 154}, 255: {'s': 239}, 373: {'s': 336}, 421: {'w': 336}, 287: {'n': 313, 's': 224, 'e': 353}, 353: {'n': 380, 'w': 287}, 380: {'n': 476, 's': 353, 'e': 445}, 445: {'s': 480, 'w': 380, 'e': 446}, 480: {'n': 445}, 446: {'w': 445}, 476: {'s': 380}, 313: {'s': 287}, 199: {'n': 281, 'w': 318, 'e': 197}, 281: {'n': 350, 's': 199, 'w': 392}, 392: {'n': 408, 'e': 281}, 318: {'s': 340, 'w': 394, 'e': 199}, 394: {'n': 426, 'w': 422, 'e': 318}, 340: {'n': 318, 'w': 374}, 374: {'e': 340}, 422: {'n': 461, 'e': 394}, 426: {'s': 394}, 461: {'s': 422}, 350: {'n': 425, 's': 281}, 425: {'n': 434, 's': 350}, 434: {'s': 425}, 408: {'n': 443, 's': 392}, 443: {'s': 408, 'w': 477}, 477: {'e': 443}, 141: {'s': 107, 'w': 175}, 175: {'n': 200, 'e': 141}, 200: {'s': 175, 'w': 328, 'e': 204}, 328: {'e': 200}, 204: {'w': 200}, 167: {'w': 187, 'e': 108}, 187: {'n': 303, 'w': 301, 'e': 167}, 303: {'n': 352, 's': 187, 'w': 333}, 333: {'n': 358, 'w': 365, 'e': 303}, 365: {'s': 447, 'w': 414, 'e': 333}, 358: {'n': 397, 's': 333, 'w': 399}, 397: {'s': 358}, 352: {'s': 303}, 301: {'e': 187}, 399: {'w': 400, 'e': 358}, 400: {'w': 492, 'e': 399}, 492: {'e': 400}, 447: {'n': 365}, 414: {'e': 365}, 168: {'n': 207, 'w': 171, 'e': 137}, 171: {'e': 168}, 207: {'s': 168, 'w': 297}, 297: {'e': 207}, 216: {'w': 236, 'e': 213}, 236: {'s': 263, 'w': 258, 'e': 216}, 263: {'n': 236, 's': 299, 'w': 372}, 372: {'w': 433, 'e': 263}, 299: {'n': 263, 's': 356, 'w': 312}, 356: {'n': 299, 's': 405}, 405: {'n': 356, 's': 432}, 432: {'n': 405, 's': 449, 'e': 473}, 473: {'w': 432}, 312: {'s': 347, 'w': 355, 'e': 299}, 258: {'e': 236}, 347: {'n': 312, 's': 375, 'w': 437}, 375: {'n': 347, 's': 413, 'w': 393}, 437: {'e': 347}, 355: {'w': 457, 'e': 312}, 457: {'w': 494, 'e': 355}, 494: {'e': 457}, 393: {'e': 375}, 413: {'n': 375, 's': 419, 'w': 478}, 478: {'w': 493, 'e': 413}, 493: {'e': 478}, 419: {'n': 413}, 449: {'n': 432, 'e': 450}, 450: {'w': 449}, 433: {'e': 372}, 190: {'w': 222, 'e': 129}, 222: {'w': 274, 'e': 190}, 274: {'e': 222}, 379: {'s': 266}, 2: {'n': 1, 's': 5, 'e': 10}, 10: {'s': 38, 'w': 2}, 38: {'n': 10}, 5: {'n': 2, 's': 50, 'w': 6}, 6: {'s': 62, 'w': 23, 'e': 5}, 23: {'s': 57, 'w': 58, 'e': 6}, 58: {'e': 23}, 50: {'n': 5, 's': 66, 'e': 70}, 66: {'n': 50, 's': 96}, 70: {'s': 116, 'w': 50, 'e': 87}, 116: {'n': 70, 's': 159}, 159: {'n': 116}, 87: {'s': 117, 'w': 70}, 117: {'n': 87, 's': 127, 'e': 170}, 127: {'n': 117, 's': 212, 'e': 173}, 173: {'s': 202, 'w': 127}, 202: {'n': 173, 's': 267, 'e': 249}, 170: {'n': 182, 'w': 117}, 182: {'s': 170, 'e': 211}, 211: {'s': 248, 'w': 182}, 248: {'n': 211, 's': 272}, 272: {'n': 248}, 212: {'n': 127, 's': 229}, 229: {'n': 212, 's': 237}, 237: {'n': 229, 'e': 370}, 370: {'w': 237}, 267: {'n': 202, 'e': 302}, 302: {'w': 267, 'e': 402}, 249: {'w': 202}, 402: {'w': 302, 'e': 403}, 403: {'w': 402, 'e': 439}, 439: {'w': 403}, 96: {'n': 66, 's': 179}, 179: {'n': 96, 's': 181, 'e': 201}, 181: {'n': 179}, 201: {'s': 206, 'w': 179}, 206: {'n': 201, 's': 232}, 232: {'n': 206, 's': 265, 'w': 244}, 244: {'s': 264, 'e': 232}, 265: {'n': 232, 's': 268, 'e': 273}, 273: {'s': 296, 'w': 265, 'e': 298}, 268: {'n': 265, 's': 276}, 276: {'n': 268, 's': 459, 'w': 322}, 459: {'n': 276, 's': 467}, 467: {'n': 459}, 322: {'s': 424, 'e': 276}, 424: {'n': 322}, 298: {'w': 273, 'e': 360}, 360: {'n': 364, 'w': 298}, 296: {'n': 273, 's': 382, 'e': 308}, 308: {'s': 317, 'w': 296, 'e': 337}, 317: {'n': 308, 's': 416}, 382: {'n': 296, 's': 455}, 455: {'n': 382}, 337: {'s': 383, 'w': 308}, 383: {'n': 337, 's': 460}, 460: {'n': 383}, 416: {'n': 317}, 364: {'s': 360, 'e': 401}, 401: {'s': 420, 'w': 364, 'e': 427}, 427: {'s': 438, 'w': 401, 'e': 474}, 420: {'n': 401, 's': 464}, 464: {'n': 420}, 438: {'n': 427, 's': 448}, 448: {'n': 438, 's': 475, 'e': 490}, 490: {'w': 448}, 474: {'w': 427}, 475: {'n': 448, 's': 496}, 496: {'n': 475}, 264: {'n': 244, 's': 290}, 290: {'n': 264}, 62: {'n': 6, 's': 65}, 65: {'n': 62, 's': 134}, 134: {'n': 65, 's': 144}, 144: {'n': 134, 's': 218}, 218: {'n': 144, 's': 252, 'w': 118}, 252: {'n': 218, 's': 261}, 261: {'n': 252, 's': 345}, 345: {'n': 261, 's': 409}, 118: {'n': 110, 'w': 133, 'e': 218}, 110: {'n': 97, 's': 118, 'w': 157}, 97: {'n': 94, 's': 110, 'w': 153}, 94: {'n': 57, 's': 97, 'w': 113}, 113: {'w': 145, 'e': 94}, 133: {'s': 234, 'w': 151, 'e': 118}, 234: {'n': 133, 's': 280, 'w': 247, 'e': 259}, 280: {'n': 234}, 247: {'s': 369, 'e': 234}, 259: {'s': 291, 'w': 234}, 291: {'n': 259, 's': 306}, 306: {'n': 291, 's': 415}, 415: {'n': 306}, 151: {'n': 188, 'e': 133}, 188: {'s': 151}, 369: {'n': 247}, 157: {'e': 110}, 153: {'e': 97}, 57: {'n': 23, 's': 94, 'w': 68}, 68: {'e': 57}, 145: {'s': 183, 'e': 113}, 183: {'n': 145}, 409: {'n': 345, 's': 488}, 488: {'n': 409}, 18: {'s': 24, 'w': 12, 'e': 34}, 34: {'n': 35, 'w': 18, 'e': 39}, 39: {'s': 52, 'w': 34, 'e': 71}, 71: {'s': 115, 'w': 39, 'e': 150}, 115: {'n': 71, 'e': 160}, 160: {'w': 115, 'e': 214}, 52: {'n': 39}, 35: {'s': 34, 'e': 44}, 44: {'n': 48, 'w': 35, 'e': 59}, 59: {'w': 44, 'e': 189}, 189: {'w': 59, 'e': 275}, 48: {'s': 44, 'e': 53}, 53: {'n': 75, 'w': 48}, 24: {'n': 18, 's': 29, 'e': 25}, 29: {'n': 24, 's': 54}, 25: {'s': 43, 'w': 24}, 43: {'n': 25, 's': 77, 'e': 49}, 49: {'w': 43, 'e': 119}, 77: {'n': 43, 'e': 130}, 130: {'w': 77}, 119: {'s': 219, 'w': 49, 'e': 131}, 219: {'n': 119, 's': 242, 'e': 305}, 242: {'n': 219, 's': 286}, 286: {'n': 242, 's': 309, 'e': 288}, 305: {'w': 219, 'e': 330}, 330: {'s': 348, 'w': 305, 'e': 454}, 454: {'w': 330}, 348: {'n': 330}, 131: {'w': 119, 'e': 329}, 329: {'w': 131, 'e': 407}, 407: {'w': 329}, 309: {'n': 286, 's': 371, 'e': 377}, 377: {'w': 309, 'e': 456}, 456: {'w': 377}, 371: {'n': 309, 'e': 430}, 430: {'w': 371, 'e': 440}, 288: {'n': 326, 'w': 286, 'e': 498}, 326: {'s': 288}, 498: {'w': 288}, 440: {'w': 430}, 54: {'n': 29}, 75: {'n': 78, 's': 53, 'e': 88}, 78: {'s': 75, 'e': 90}, 88: {'s': 103, 'w': 75, 'e': 125}, 103: {'n': 88}, 125: {'s': 198, 'w': 88, 'e': 238}, 238: {'n': 381, 'w': 125, 'e': 293}, 381: {'s': 238, 'e': 431}, 431: {'w': 381}, 198: {'n': 125, 'e': 270}, 270: {'w': 198, 'e': 300}, 300: {'w': 270, 'e': 320}, 320: {'s': 471, 'w': 300}, 471: {'n': 320}, 293: {'w': 238}, 90: {'n': 98, 'w': 78, 'e': 142}, 98: {'n': 186, 's': 90}, 186: {'s': 98, 'e': 262}, 142: {'n': 245, 'w': 90}, 245: {'s': 142, 'e': 343}, 343: {'w': 245}, 262: {'w': 186, 'e': 390}, 390: {'w': 262, 'e': 398}, 398: {'s': 487, 'w': 390}, 487: {'n': 398}, 275: {'w': 189, 'e': 283}, 283: {'w': 275, 'e': 376}, 376: {'s': 468, 'w': 283}, 468: {'n': 376}, 150: {'w': 71, 'e': 251}, 251: {'w': 150}, 214: {'w': 160, 'e': 246}, 246: {'n': 325, 'w': 214, 'e': 412}, 325: {'s': 246}, 412: {'w': 246}, 26: {'n': 27, 'w': 20}, 31: {'n': 37, 's': 20}, 37: {'n': 91, 's': 31, 'e': 42}, 91: {'n': 101, 's': 37}, 42: {'n': 51, 'w': 37}, 51: {'n': 93, 's': 42}, 93: {'s': 51}, 101: {'s': 91}, 27: {'s': 26, 'e': 55}, 55: {'n': 56, 'w': 27}, 56: {'n': 73, 's': 55, 'e': 67}, 67: {'n': 84, 'w': 56}, 73: {'n': 132, 's': 56}, 132: {'n': 172, 's': 73}, 172: {'s': 132}, 84: {'n': 86, 's': 67}, 86: {'n': 146, 's': 84, 'e': 95}, 146: {'s': 86}, 95: {'n': 109, 'w': 86}, 109: {'n': 136, 's': 95}, 136: {'s': 109, 'e': 231}, 231: {'n': 282, 'w': 136, 'e': 294}, 294: {'n': 363, 'w': 231, 'e': 311}, 282: {'s': 231}, 311: {'n': 389, 'w': 294, 'e': 499}, 499: {'w': 311}, 363: {'s': 294}, 389: {'s': 311}}

class Dijkstra:
	def __init__(self):
		self.dict = {}

	def add_node(self, node):
		self.dict[node] = {}

	def add_shortest(self, node, shortest):
		self.dict[node]['shortest_0'] = shortest

	def add_prev_dir(self, node, prev_dir):
		self.dict[node]['prev_node_dir'] = prev_dir
	
	def add_prev_node(self, node, prev_node):
		self.dict[node]['prev_node'] = prev_node

	def add_visited(self,node):
		self.dict[node]['visited'] = False

	def confirm_visited(self,node):
		self.dict[node]['visited'] = True

def recursive_DFT(neighbor_node, prev_node):
	#for each neighbor, add distance (lastest shortest + 1)
	shortest_dist = our_dict.dict[prev_node]['shortest_0'] + 1
	for key, v in graph[neighbor_node].items():
		#check if neighbor exists, if not add everything, if already exists pass to overwrite logic.
		if v not in our_dict.dict:
			print('ADDING NEW NODE: ', v)
			our_dict.add_node(v)
			our_dict.add_shortest(v, shortest_dist)
			our_dict.add_prev_dir(v, key)
			our_dict.add_prev_node(v, neighbor_node)
			our_dict.add_visited(v)
		elif our_dict.dict[v]['shortest_0'] > shortest_dist:
		#check if current_shortest > shortest
		##if yes, overwrite related params, if not pass.
			print('OVERWRITE -- better path found')
			our_dict.add_shortest(v, shortest_dist)
			our_dict.add_prev_dir(v, key)
			our_dict.add_prev_node(v, neighbor_node)
		
	print('confirm visited: ', neighbor_node)
	our_dict.confirm_visited(neighbor_node)

	print('dict so far: ', our_dict.dict)
	for key, v in graph[neighbor_node].items():
		if our_dict.dict[v]['visited'] == True:
			pass
		else:
			print('recursing: ', v, neighbor_node)
			recursive_DFT(v,neighbor_node)


#setup
our_dict = Dijkstra()

#start at node 0, add it to dict
current_node = 0
our_dict.add_node(current_node)
our_dict.add_shortest(current_node, 0)
our_dict.add_prev_dir(current_node, '-')
our_dict.add_prev_node(current_node, 0)
our_dict.add_visited(current_node)

#for each neighbor, add distance (lastest shortest + 1)
shortest_dist = 0
for key, v in graph[current_node].items():
	#check if neighbor exists, if not add everything, if already exists pass to overwrite logic.
	if v not in our_dict.dict:
		print('ADDING NEW NODE: ', v)
		our_dict.add_node(v)
		our_dict.add_shortest(v, shortest_dist)
		our_dict.add_prev_dir(v, key)
		our_dict.add_prev_node(v, current_node)
		our_dict.add_visited(v)

#confirm visited
print('confirm visited: ', current_node)
our_dict.confirm_visited(current_node)

#trigger recursive for each neighbor
for key, v in graph[current_node].items():
	if our_dict.dict[v]['visited'] == True:
		pass
	else:
		recursive_DFT(v,0)



print('finished: ',our_dict.dict)
#pick a neighbor and repeat
#random? recursive?


#--At any time, if distance from 0 to node is < previously know, overwrite distance + overwrite previous node

'''
Pseudo code for Dijkstra's Algo

Setup table:
Node id | shortest distance from 0 | previous node(direction) | previous node(id)

1. Start at 0 node, add to table
2. For each neighbor, add distance (shortest distance to current node + 1), add direction from current node to neughbor
3. Pick a neighbor, repeat. 
--At any time, if distance from 0 to node is < previously know, overwrite distance + overwrite previous node

End up with table like this:
Node id | shortest distance from 0 | previous node(direction) | previous node(id)
289: {'shortest from 0': 319, 'prev_node_dir': 'w', 'prev_node': 250}
To build directions:
Start with longest from 0, add prev_node_dir to stack, 
go to previous node, add prev_node_dir to stack,
go to previous node... repeat
End up with stack of directions starting with 0 to longest.



'''